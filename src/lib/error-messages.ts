/**
 * Malayalam error messages for user-friendly frontend display
 * Technical errors are logged in English to console
 */

export interface ErrorContext {
    error: Error | string;
    context?: string;
    additionalInfo?: Record<string, any>;
}

export interface MalayalamError {
    userMessage: string; // Friendly Malayalam message for user
    technicalMessage: string; // English technical message for console
    errorCode?: string;
}

/**
 * Get user-friendly Malayalam error messages
 */
export function getMalayalamErrorMessage(context: ErrorContext): MalayalamError {
    const error = typeof context.error === 'string' ? new Error(context.error) : context.error;
    const errorMessage = error.message.toLowerCase();
    const contextInfo = context.context || '';

    // Only log technical details when there's an actual error (not during normal operations)
    if (error.message && !error.message.includes('success') && !error.message.includes('completed')) {
        console.error('üö® Technical Error Details:', {
            message: error.message,
            stack: error.stack,
            context: contextInfo,
            additionalInfo: context.additionalInfo,
            timestamp: new Date().toISOString()
        });
    }

    // Network/Connection errors
    if (errorMessage.includes('network') || errorMessage.includes('fetch') || errorMessage.includes('connection')) {
        return {
            userMessage: "‡¥á‡¥®‡µç‡¥±‡µº‡¥®‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ï‡¥£‡¥ï‡µç‡¥∑‡µª ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥®‡µÜ‡¥±‡µç‡¥±‡µç‚Äå‡¥µ‡µº‡¥ï‡µç‡¥ï‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
            technicalMessage: `Network error: ${error.message}`,
            errorCode: 'NETWORK_ERROR'
        };
    }

    // API/Server errors
    if (errorMessage.includes('api') || errorMessage.includes('server') || errorMessage.includes('500') || errorMessage.includes('timeout')) {
        return {
            userMessage: "‡¥∏‡µÜ‡µº‡¥µ‡¥±‡¥ø‡µΩ ‡¥í‡¥∞‡µÅ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥ï‡µÅ‡¥±‡¥ö‡µç‡¥ö‡µç ‡¥®‡¥ø‡¥Æ‡¥ø‡¥∑‡¥ô‡µç‡¥ô‡µæ ‡¥ï‡¥¥‡¥ø‡¥û‡µç‡¥û‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
            technicalMessage: `Server error: ${error.message}`,
            errorCode: 'SERVER_ERROR'
        };
    }

    // Authentication errors
    if (errorMessage.includes('auth') || errorMessage.includes('unauthorized') || errorMessage.includes('401')) {
        return {
            userMessage: "‡¥≤‡µã‡¥ó‡¥ø‡µª ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥≤‡µã‡¥ó‡¥ø‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
            technicalMessage: `Authentication error: ${error.message}`,
            errorCode: 'AUTH_ERROR'
        };
    }

    // Rate limiting
    if (errorMessage.includes('rate limit') || errorMessage.includes('too many requests') || errorMessage.includes('429')) {
        return {
            userMessage: "‡¥µ‡¥≥‡¥∞‡µÜ‡¥Ø‡¥ß‡¥ø‡¥ï‡¥Ç ‡¥Ö‡¥≠‡µç‡¥Ø‡µº‡¥§‡µç‡¥•‡¥®‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ö‡µç‡¥ö‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ. ‡¥ï‡µÅ‡¥±‡¥ö‡µç‡¥ö‡µç ‡¥®‡¥ø‡¥Æ‡¥ø‡¥∑‡¥ô‡µç‡¥ô‡µæ ‡¥ï‡¥æ‡¥§‡µç‡¥§‡¥ø‡¥∞‡µÅ‡¥®‡µç‡¥®‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
            technicalMessage: `Rate limit exceeded: ${error.message}`,
            errorCode: 'RATE_LIMIT'
        };
    }

    // Streaming errors
    if (errorMessage.includes('stream') || errorMessage.includes('streaming')) {
        return {
            userMessage: "‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥∏‡µç‡¥µ‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
            technicalMessage: `Streaming error: ${error.message}`,
            errorCode: 'STREAMING_ERROR'
        };
    }

    // LLM/Processing errors
    if (errorMessage.includes('llm') || errorMessage.includes('synthesis') || errorMessage.includes('timeout')) {
        return {
            userMessage: "‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡¥±‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥ï‡¥æ‡¥≤‡¥§‡¥æ‡¥Æ‡¥∏‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
            technicalMessage: `LLM processing error: ${error.message}`,
            errorCode: 'LLM_ERROR'
        };
    }

    // Cache errors
    if (errorMessage.includes('cache') || errorMessage.includes('memory')) {
        return {
            userMessage: "‡¥∏‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥Ç ‡¥Æ‡µÜ‡¥Æ‡µç‡¥Æ‡¥±‡¥ø ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥™‡µá‡¥ú‡µç ‡¥±‡¥ø‡¥´‡µç‡¥∞‡µÜ‡¥∑‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥§‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
            technicalMessage: `Cache/memory error: ${error.message}`,
            errorCode: 'CACHE_ERROR'
        };
    }

    // Validation errors
    if (errorMessage.includes('validation') || errorMessage.includes('invalid') || errorMessage.includes('400')) {
        return {
            userMessage: "‡¥Ö‡¥≠‡µç‡¥Ø‡µº‡¥§‡µç‡¥•‡¥®‡¥Ø‡¥ø‡µΩ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥ü‡µà‡¥™‡µç‡¥™‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
            technicalMessage: `Validation error: ${error.message}`,
            errorCode: 'VALIDATION_ERROR'
        };
    }

    // Pinecone/Vector database errors
    if (errorMessage.includes('pinecone') || errorMessage.includes('vector') || errorMessage.includes('embedding')) {
        return {
            userMessage: "‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥§‡¥ø‡¥∞‡¥Ø‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
            technicalMessage: `Vector database error: ${error.message}`,
            errorCode: 'VECTOR_DB_ERROR'
        };
    }

    // Generic fallback
    return {
        userMessage: "‡¥ï‡µç‡¥∑‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç, ‡¥í‡¥∞‡µÅ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡¥æ‡¥Ø‡¥ø. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
        technicalMessage: `Generic error: ${error.message}`,
        errorCode: 'GENERIC_ERROR'
    };
}

/**
 * Helper function to show error in chat interface
 */
export function showErrorInChat(
    error: Error | string,
    context: string = '',
    additionalInfo?: Record<string, any>
): { userMessage: string; technicalMessage: string; errorCode?: string } {
    const malayalamError = getMalayalamErrorMessage({
        error,
        context,
        additionalInfo
    });

    return malayalamError;
}

/**
 * Common error messages for different scenarios
 */
export const COMMON_ERRORS = {
    NETWORK_ISSUE: "‡¥á‡¥®‡µç‡¥±‡µº‡¥®‡µÜ‡¥±‡µç‡¥±‡µç ‡¥ï‡¥£‡¥ï‡µç‡¥∑‡µª ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥®‡µÜ‡¥±‡µç‡¥±‡µç‚Äå‡¥µ‡µº‡¥ï‡µç‡¥ï‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    SERVER_BUSY: "‡¥∏‡µÜ‡µº‡¥µ‡µº ‡¥§‡¥ø‡¥∞‡¥ï‡µç‡¥ï‡¥ø‡¥≤‡¥æ‡¥£‡µç. ‡¥ï‡µÅ‡¥±‡¥ö‡µç‡¥ö‡µç ‡¥®‡¥ø‡¥Æ‡¥ø‡¥∑‡¥ô‡µç‡¥ô‡µæ ‡¥ï‡¥æ‡¥§‡µç‡¥§‡¥ø‡¥∞‡µÅ‡¥®‡µç‡¥®‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    PROCESSING_DELAY: "‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥§‡¥Ø‡µç‡¥Ø‡¥æ‡¥±‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡µΩ ‡¥ï‡¥æ‡¥≤‡¥§‡¥æ‡¥Æ‡¥∏‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    INVALID_REQUEST: "‡¥Ö‡¥≠‡µç‡¥Ø‡µº‡¥§‡µç‡¥•‡¥®‡¥Ø‡¥ø‡µΩ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥ü‡µà‡¥™‡µç‡¥™‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
    GENERIC_ERROR: "‡¥ï‡µç‡¥∑‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç, ‡¥í‡¥∞‡µÅ ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡¥æ‡¥Ø‡¥ø. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï.",
    AUTHENTICATION_FAILED: "‡¥≤‡µã‡¥ó‡¥ø‡µª ‡¥™‡µç‡¥∞‡¥∂‡µç‡¥®‡¥Æ‡µÅ‡¥£‡µç‡¥ü‡µç. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥≤‡µã‡¥ó‡¥ø‡µª ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.",
    RATE_LIMITED: "‡¥µ‡¥≥‡¥∞‡µÜ‡¥Ø‡¥ß‡¥ø‡¥ï‡¥Ç ‡¥Ö‡¥≠‡µç‡¥Ø‡µº‡¥§‡µç‡¥•‡¥®‡¥ï‡µæ ‡¥Ö‡¥Ø‡¥ö‡µç‡¥ö‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ. ‡¥ï‡µÅ‡¥±‡¥ö‡µç‡¥ö‡µç ‡¥®‡¥ø‡¥Æ‡¥ø‡¥∑‡¥ô‡µç‡¥ô‡µæ ‡¥ï‡¥æ‡¥§‡µç‡¥§‡¥ø‡¥∞‡µÅ‡¥®‡µç‡¥®‡µç ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥∂‡µç‡¥∞‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï."
} as const;
